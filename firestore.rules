rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Trips collection
    match /trips/{tripId} {
      // Only owner can edit trip
      // Anyone logged in can read
    	allow read: if request.auth != null;

      // Only creator can create
      allow create: if request.auth.uid != null
      	&& request.resource.data.ownerId == request.auth.uid
        && request.resource.data.keys().hasOnly([
          'name', 'destination', 'destinationLat', 'destinationLng', 'startDate', 'endDate', 'image', 'createdAt', 'updatedAt', 'ownerId'
        ])
        && request.resource.data.keys().hasAll([
        	'name', 'destination', 'destinationLat', 'destinationLng', 'startDate', 'endDate', 'image', 'createdAt', 'updatedAt', 'ownerId'
        ])
        // ID and ownerId are always required and must be string
        && (request.resource.data.ownerId is string && request.resource.data.ownerId.size() > 0)
        // createdAt/updatedAt are always required and must be timestamp
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp

        // These fields can be string or null
        && ((request.resource.data.name is string && request.resource.data.name.size() > 0) || request.resource.data.name == null)
        && ((request.resource.data.destination is string && request.resource.data.destination.size() > 0) || request.resource.data.destination == null)
        && ((request.resource.data.image is string && request.resource.data.image.size() > 0) || request.resource.data.image == null)

        // These fields can be number or null
        && (request.resource.data.destinationLat is number || request.resource.data.destinationLat == null)
          && (request.resource.data.destinationLng is number || request.resource.data.destinationLng == null)

        // Dates are timestamp or null
        && (request.resource.data.startDate is timestamp || request.resource.data.startDate == null)
        && (request.resource.data.endDate is timestamp || request.resource.data.endDate == null);

      allow delete: if request.auth.uid == resource.data.ownerId

      allow update: if request.auth.uid == resource.data.ownerId
        && request.resource.data.keys().hasOnly([
          'name', 'destination', 'destinationLat', 'destinationLng', 'startDate', 'endDate', 'image', 'createdAt', 'updatedAt', 'ownerId'
        ])
        && request.resource.data.keys().hasAll([
          'name', 'destination', 'destinationLat', 'destinationLng', 'startDate', 'endDate', 'image', 'createdAt', 'updatedAt', 'ownerId'
        ])
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["name"])) || (request.resource.data.name is string && request.resource.data.name.size() > 0))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["destination"])) || (request.resource.data.destination is string && request.resource.data.destination.size() > 0))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["image"])) || (request.resource.data.image is string && request.resource.data.image.size() > 0))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["destinationLat"])) || (request.resource.data.destinationLat is number))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["destinationLng"])) || (request.resource.data.destinationLng is number))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["startDate"])) || (request.resource.data.startDate is timestamp))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["endDate"])) || (request.resource.data.endDate is timestamp))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["createdAt"])) || false)
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["updatedAt"])) || (request.resource.data.updatedAt is timestamp))
        && (!(request.resource.data.diff(resource.data).changedKeys().hasAny(["ownerId"])) || (request.resource.data.ownerId is string && request.resource.data.ownerId.size() > 0));

    // Subcollection: participants
		match /participants/{participantId} {
			allow read: if request.auth != null;

      // Owner can add/remove anyone, or participant can remove their own
      allow delete: if participantId != get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId
              && (
                request.auth.uid == participantId
                || request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId
              );
                      
      allow update: if false;

      allow create: if
      	request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId &&
  			request.resource.data.keys().hasAll(['displayName', 'photoURL', 'uid']) &&
  			request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'uid']) &&
  			(request.resource.data.displayName is string && request.resource.data.displayName.size() > 2) &&
  			(request.resource.data.photoURL is string) &&
  			(request.resource.data.uid is string && request.resource.data.uid.size() > 0) &&
        (request.resource.data.uid == participantId);
    }
      
  	match /events/{eventId} {
      // Any signed-in user can read events
      allow read: if request.auth != null;

      // Only trip owner can CREATE, with all fields present, not null, correct types
      allow create: if request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId
        && request.resource.data.keys().hasOnly([
          'id', 'name', 'category', 'img', 'address', 'lat', 'lng', 'from', 'to'
        ])
        && request.resource.data.keys().hasAll([
          'id', 'name', 'category', 'img', 'address', 'lat', 'lng', 'from', 'to'
        ])
        // Required fields: correct types and not null/empty
        && request.resource.data.id is string && request.resource.data.id.size() > 0
        && request.resource.data.name is string && request.resource.data.name.size() > 0
        && request.resource.data.category is string && request.resource.data.category.size() > 0
        && request.resource.data.img is string && request.resource.data.img.size() > 0
        && request.resource.data.address is string && request.resource.data.address.size() > 0
        && request.resource.data.lat is number
        && request.resource.data.lng is number
        && request.resource.data.from is timestamp
        && request.resource.data.to is timestamp;

      // Only owner can DELETE
      allow delete: if request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId;

      // Only owner can UPDATE, all fields must still be present and valid after update
      allow update: if request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId
        // Only from/to can be changed
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['from', 'to'])
        // All fields must remain present and valid
        && request.resource.data.keys().hasOnly([
          'id', 'name', 'category', 'img', 'address', 'lat', 'lng', 'from', 'to'
        ])
        && request.resource.data.keys().hasAll([
          'id', 'name', 'category', 'img', 'address', 'lat', 'lng', 'from', 'to'
        ])
        && request.resource.data.from is timestamp
        && request.resource.data.to is timestamp;
      }
	}
    // User Trips index for reverse lookups
    match /userTrips/{userId} {
      match /trips/{tripId} {
      // Only allow the user to read their own userTrips.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Writes should be done by server/cloud functions only, so no direct create/update/delete from client.
      allow write: if false;
      }
    }
  }
}